#!/bin/bash

function splash() {
clear
cat << "EOF"

  ___ _            _         _       
 / __| |_ __ _ _ _| |   __ _| |__ ___
 \__ |  _/ _` | '_| |__/ _` | '_ (_-<
 |___/\__\__,_|_| |____\__,_|_.__/__/

EOF
echo "============================================================================"
echo "$1"
echo "============================================================================"
}

date=$(date '+%Y-%m-%d')

splash "Which laptop are you creating an update for?"
PS3="Select the model: "

models=("StarLite MkII" "StarLite MkIII" "StarLabTop MkIII" "StarLabTop MkIV" "StarBook MkV")
select model in "${models[@]}"
do
	case $model in
		"StarLite MkII")
			ref="I2"
			shell="/P /N"
			hwid="013b60e5-1023-5bee-8ae5-14cae21377b7"
			uefi="797f8bae-0ea2-4c0f-8a30-7d10ccfacbc0"
			superio="0aa07091-dc02-5e62-a0cd-9d3880721b64"
			superio2="f90a3e8e-af9b-5023-8804-a7faf809e0b1"
			ami="0676539d-150f-5f07-89b9-fe0afd98c44e"
			break
			;;
		"StarLite MkIII")
			ref="I3"
			shell="/P /N"
			hwid="d5521faa-c50b-5d64-971d-8fd400030c51"
			uefi="d9d7b13b-e4db-4f91-8bf6-8952a9caa82a"
			superio="0aa07091-dc02-5e62-a0cd-9d3880721b64"
			superio2="b0e3a8ac-24ce-55e3-8aad-2261f1f4fa08"
			break
			;;
		"StarLabTop MkIII")
			ref="L3"
			shell="/P /N /B /L"
			hwid="013b60e5-1023-5bee-8ae5-14cae21377b7"
			uefi="8265d473-a6c2-42b4-897b-bc220faa2d32"
			superio="0aa07091-dc02-5e62-a0cd-9d3880721b64"
			superio2="90a3e8e-af9b-5023-8804-a7faf809e0b1"
			ami="a20caf4c-3ed8-531c-b59a-eb079ab5e65e"
			coreboot="d33219e2-b84c-53a8-a624-27af9752dba6"
			break
			;;
		"StarLabTop MkIV")
			ref="L4"
			shell="/P /N /B /L"
			hwid="baf1d04e-fd16-5e6a-93cc-1c23d171f879"
			uefi="502bff68-b8db-4b01-86ef-ab65f6502a77"
			superio="0aa07091-dc02-5e62-a0cd-9d3880721b64"
			superio2="1e8bc0cc-eee2-5e30-ab4f-1ff923118f01"
			ami="cc6437bf-0955-5c03-84a6-8b87c7a7c244"
			coreboot="0ee5867c-93f0-5fb4-adf1-9d686ea1183a"
			break
			;;
		"StarBook MkV")
			ref="B5"
			shell="/P /N /B /L"
			hwid="85aba599-addd-5985-a2e8-eddb41c61ba3"
			uefi="230c8b18-8d9b-53ec-838b-6cfc0383493a"
			superio="0aa07091-dc02-5e62-a0cd-9d3880721b64"
			superio2="049060b5-5010-5ca0-8002-07923951d15e"
			ami="7c13a5b2-22f8-5564-8b48-4bbf20da8ed6"
			coreboot"7c13a5b2-22f8-5564-8b48-4bbf20da8ed6"
			break
			;;
	esac
done

series=`echo $model | cut -d ' ' -f1`
ver=`echo $model | cut -d ' ' -f2`

splash "What is the version number"
PS3="Select the version: "
version=$(ls | grep '.rom\|.bin' | sed 's/.rom//g' | sed 's/.bin//g' | uniq)

if [[ -e "$version.rom" ]] && [[ -e "$version.bin" ]]; then
	:
elif [[ -e "$version.rom" ]] && [[ $(du -k "$version.rom" | cut -f1) = 8*** ]]; then
	# 8192KB SPI, no dedicated binary
	cp $version.rom $version.bin
fi

releasenotes=()
echo "Enter changes for release notes: "
nano /tmp/release

while IFS= read -r line; do
    releasenotes+=("$line")
done </tmp/release

rm /tmp/release

rn=$(printf '> %s\\n' "${releasenotes[@]}")
crn=$(printf '\\t\\t\\t\\t\\t<li>%s</li>\\n' "${releasenotes[@]}")
ern=$(printf 'echo "%s"\\n' "${releasenotes[@]}")

function metadata() {
printf "<\041--  Copyright 2019 Star Labs Online Limited  --> \
	\n<component type=\"firmware\"> \
	\n\t<id>com.starlabs.$ref.$firmware.$(echo $UpdateProtocol | rev | cut -d '.' -f1 | rev)</id> \
	\n\t<name>$model</name> \
	\n\t<summary>$firmware firmware for $model</summary> \
	\n\t$Branch \
	\n\t<description> \
	\n\t\t<p>Updating the $firmware firmware for $model makes your computer more reliable and can add new features.</p> \
	\n\t</description> \
	\n\t<provides> \
	\n\t\t<firmware type=\"flashed\">$PrimaryGuid</firmware> \
	\n\t\t<firmware type=\"flashed\">$SecondaryGuid</firmware> \
	\n\t</provides> \
	\n\t<requires> \
	\n\t\t<id compare=\"ge\" version=\"$ClientVersion\">org.freedesktop.fwupd</id> \
	\n\t\t<hardware>$hwid</hardware> \
	\n\t\t$Client \
	\n\t</requires> \
	\n\t<url type=\"homepage\">https://starlabs.systems</url> \
	\n\t<metadata_license>CC0-1.0</metadata_license> \
	\n\t<project_license>proprietary</project_license> \
	\n\t<developer_name>Star Labs</developer_name> \
	\n\t<custom> \
	\n\t\t<value key=\"LVFS::UpdateProtocol\">$UpdateProtocol</value> \
	\n\t\t<value key=\"LVFS::VersionFormat\">$VersionFormat</value> \
	\n\t</custom> \
	\n\t<categories> \
	\n\t\t<category>X-Device</category> \
	\n\t</categories> \
	\n\t<releases> \
	\n\t\t<release urgency=\"medium\" version=\"$Base$version\" date=\"$date\"> \
	\n\t\t\t<checksum filename=\"$version.$Extension\" target=\"content\"/> \
	\n\t\t\t<description> \
	\n\t\t\t\t<p>This stable release includes the following features:</p> \
	\n\t\t\t\t<ul> \
	\n$crn \
	\n\t\t\t\t</ul> \
	\n\t\t\t</description> \
	\n\t\t</release> \
	\n\t</releases> \
	\n</component>" | sed '/<firmware type="flashed"><\/firmware>/d' >> $ref.metainfo.xml
}
function nsh() {
printf "echo -off \
	\ncls
	\nset payload $version.bin \
	\n \
	\necho \"*******************************************************************\" \
	\necho \".d8888. d888888b  .d8b.  d8888b.   db       .d8b.  d8888b. .d8888. \" \
	\necho \"88\'  YP \`~~88~~\' d8\' \`8b 88  \`8D   88      d8\' \`8b 88  \`8D 88\'  YP \" \
	\necho \"\`8bo.      88    88ooo88 88oobY\'   88      88ooo88 88oooY\' \`8bo.   \" \
	\necho \"  \`Y8b.    88    88~~~88 88\`8b     88      88~~~88 88~~~b.   \`Y8b. \" \
	\necho \"db   8D    88    88   88 88 \`88.   88booo. 88   88 88   8D db   8D \" \
	\necho \"\`8888Y\'    YP    YP   YP 88   YD   Y88888P YP   YP Y8888P\' \`8888Y\' \" \
	\necho \"*******************************************************************\" \
	\necho \"********************* BIOS & Firmware Update **********************\" \
	\necho \"*******************************************************************\" \
	\necho \" \" \
	\necho \"This update is for the $model. Installing on any other laptop will cause it not to start.\" \
	\necho \" \" \
	\necho \"Press Enter to update firmware or press Q to quit.\" \
	\npause \
	\necho \"This update contains the following changes:\" \
	\n$ern \
	\nfor %%a run (0 10) \
	\nif exist fs%%a:$tool.efi then \
	\n  fs%%a: \
	\n  $tool$selector %%payload%% $switch \
	\n  reset \
	\nendif \
	\nendfor" >> startup.nsh
}

splash "Which type of update is it?"
PS3="Select the firmware: "
firmwares=("AMI" "coreboot" "ITE" "ITE128")
select firmware in "${firmwares[@]}"
do
	target=$(echo "$series/$ver/$firmware/$version")
	mkdir -p "$target"
	cp $version.* "$target/"

	case $firmware in
		"AMI")
			if [[ ! -e "$version.rom" ]] && [[ ! -e "$version.bin" ]]; then
				echo "Required files not found. $version.rom $version.bin"
				exit 0
			fi
			# CAB: UEFI Capsule
			ClientVersion="1.3.9"
			UpdateProtocol="org.uefi.capsule"
			if [[ "$ref" == "B5" ]]; then
				VersionFormat="number"
			else
				VersionFormat="triplet"
			fi
			PrimaryGuid="$uefi"
			Extension="cap"
			metadata
			./header.py --guid "$uefi" --bin "$version.rom" --cap "$version.cap"
			gcab -c "$target/uefi-$ref.cab" "$version.cap" "$ref.metainfo.xml"
			rm "$ref.metainfo.xml" "$version.cap" "$version.rom"
			# CAB: flashrom
			ClientVersion="1.7.0"
			UpdateProtocol="org.flashrom"
			VersionFormat="triplet"
			Extension="bin"
			PrimaryGuid="$coreboot"
			metadata
			gcab -c "$target/flashrom-$ref.cab" "$version.bin" "$ref.metainfo.xml"
			rm "$ref.metainfo.xml"
			# EFI Shell Update
			tool=AfuEfix64
			switch="$shell"
			nsh
			zip -rj "$target/efi-$ref.zip" "$version.bin" "startup.nsh" "binaries/$tool.efi"
			rm startup.nsh "$version.bin"
			break
			;;
		"coreboot")
			ClientVersion="1.7.0"
			UpdateProtocol="org.flashrom"
			VersionFormat="number"
			Branch="<branch>$firmware</branch>"
			Client="<client>switch-branch</client>"
			Base="0x"
			PrimaryGuid="$coreboot"
			SecondaryGuid="$ami"
			Extension="rom"
			metadata
			gcab -c "$target/coreboot-$ref.cab" "$version.rom" "$ref.metainfo.xml"
			rm "$ref.metainfo.xml" "$version.rom" "$version.bin"
			break
			;;
		"ITE")
			# CAB
			ClientVersion="1.7.0"
			UpdateProtocol="tw.com.ite.superio"
			VersionFormat="pair"
			Extension="bin"
			PrimaryGuid=$superio
			SecondaryGuid=$superio2
			metadata
			gcab -c "$target/ite-$ref.cab" "$version.bin" "$ref.metainfo.xml"
			rm "$ref.metainfo.xml"
			# EFI Shell Update
			tool="eFuitX64"
			selector=" /u"
			switch="/faildelay"
			nsh
			zip -rj "$target/efi-$ref.zip" "$version.bin" "startup.nsh" "binaries/$tool.efi"
			rm startup.nsh "$version.bin"
			break
			;;
		"ITE128")
			# CAB
			ClientVersion="1.7.0"
			UpdateProtocol="tw.com.ite.superio"
			VersionFormat="pair"
			Extension="bin"
			PrimaryGuid=$superio
			metadata
			gcab -c "$target/ite-$ref.cab" "$version.bin" "$ref.metainfo.xml"
			rm "$ref.metainfo.xml"
			# EFI Shell Update
			tool="ifu"
			selector=""
			switch="128"
			nsh
			zip -rj "$target/efi-$ref.zip" "$version.bin" "startup.nsh" "binaries/$tool.efi"
			rm startup.nsh "$version.bin"
			break
			;;
	esac
done



echo "Updating README"

log=`echo "\*\*$series\*\*\[$ver\]"`
echo $log

sed -i "/$log/a $rn" README.md
sed -i "/$log/a \#\#\#\# $firmware: [$version](https://github.com/StarLabsLtd/firmware/raw/master/$series/$ver/$firmware/$version/efi-$ref.zip) ($date)" README.md

echo "Upload to GitHub?"
select git in "Yes" "No"
do
	case $git in
		"Yes")
			git add *
			git commit -m "Added $name $VERSION"
			git push
			echo "Done"
			break
			;;
		"No")
			echo "Done"
			break
			;;
	esac
done
