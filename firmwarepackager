#!/bin/bash

# LabTop Mk III GUID
# HWID
# 013b60e5-1023-5bee-8ae5-14cae21377b7
# BIOS
# 8265d473-a6c2-42b4-897b-bc220faa2d32
# EC
# 0aa07091-dc02-5e62-a0cd-9d3880721b64

# Lite Mk II GUID
# HWID
# b29597d2-f144-52f1-85c3-b40567f2e0bf
# BIOS
# 797f8bae-0ea2-4c0f-8a30-7d10ccfacbc0
# EC
# 0aa07091-dc02-5e62-a0cd-9d3880721b64

# LabTop Mk IV
# HWID
# baf1d04e-fd16-5e6a-93cc-1c23d171f879
# BIOS
# 502bff68-b8db-4b01-86ef-ab65f6502a77
# EC
# 0aa07091-dc02-5e62-a0cd-9d3880721b64


date=$(date '+%Y-%m-%d')
echo "Which laptop are you creating an update for?"
select m in "I2" "L3" "L4"
	do
		break
	done

echo "Which type of update is it?"
select t in "BIOS" "EC"
	do
		break
	done



read -p "What is the version of the update? " v
array=()
while IFS= read -r -p "Enter changes for release notes: " line; do
    [[ $line ]] || break
    array+=("$line")
done

rn=$(printf '* %s\\n' "${array[@]}")
crn=$(printf '\\t\\t<li>%s</li>\\n' "${array[@]}")
ern=$(printf 'echo "%s"\\n' "${array[@]}")



if [[ "$m" == "I2" ]]; then
	name="Star Lite Mk II"
	hwid="b29597d2-f144-52f1-85c3-b40567f2e0bf"
	bios="797f8bae-0ea2-4c0f-8a30-7d10ccfacbc0"
	ec="0aa07091-dc02-5e62-a0cd-9d3880721b64"
	s="/P /N"
elif [[ "$m" == "L3" ]]; then
	name="Star LabTop Mk III"
	hwid="013b60e5-1023-5bee-8ae5-14cae21377b7"
	bios="8265d473-a6c2-42b4-897b-bc220faa2d32"
	ec="0aa07091-dc02-5e62-a0cd-9d3880721b64"
	s="/P /B /N"
elif [[ "$m" == "L4" ]]; then
	name="Star LabTop Mk IV"
	hwid="baf1d04e-fd16-5e6a-93cc-1c23d171f879"
	bios="502bff68-b8db-4b01-86ef-ab65f6502a77"
	ec="0aa07091-dc02-5e62-a0cd-9d3880721b64"
	s="/P /B /N"
fi

p=$(echo "$m/$t/$v")

if [[ "$t" == "BIOS" ]]; then
	tool="AfuEfix64.efi"
	ext="rom"
elif [[ "$t" == "EC" ]]; then
	tool="eFuitX64.efi"
	ext="bin"
fi

echo "Backing up original files"
	echo
	mkdir -p "$p/Original/"
	cp "$v.$ext" "$p/Original/"
echo "Done"

echo "Creating EFI Shell Update"
	echo
	mkdir -p "$p/EFI/"

	cp "MasterFiles/$t.nsh" "$p/EFI/startup.nsh"
	cp "MasterFiles/$tool" "$p/EFI/"
	cp "$v.$ext" "$p/EFI/$v.$ext"
	rm "$v.rom"
	sed -i "s#%SWITCH%#$s#g" "$p/EFI/startup.nsh"
	sed -i "s#%VERSION%#$v#g" "$p/EFI/startup.nsh"
	sed -i "s#%RELEASE%#$ern#" "$p/EFI/startup.nsh"
	echo "Creating .zip"
	zip -rj "$p/$m-$v.zip" "$p/EFI/"* &>/dev/null

echo "Done"
echo

echo "Creating CAB Update"
	echo
	mkdir -p "$p/CAB/"
	cp "MasterFiles/$t.metainfo.xml" "$p/CAB/$m.metainfo.xml"
	if [[ "$t" == "BIOS" ]]; then
		./header.py --guid "$bios" --bin "$v.fd" --cap "$p/CAB/$v.cap"
		rm "$v.fd"
	elif [[ "$t" == "EC" ]]; then
		cp "$v.bin" "$p/CAB/$v.bin"
		rm "$v.bin"
	fi
	sed -i "s#%MODEL%#$m#g" "$p/CAB/$m.metainfo.xml"
	sed -i "s#%NAME%#$name#g" "$p/CAB/$m.metainfo.xml"
	sed -i "s#%BIOS%#$bios#g" "$p/CAB/$m.metainfo.xml"
	sed -i "s#%EC%#$ec#g" "$p/CAB/$m.metainfo.xml"
	sed -i "s#%HWID%#$hwid#g" "$p/CAB/$m.metainfo.xml"
	sed -i "s#%VERSION%#$v#g" "$p/CAB/$m.metainfo.xml"
	sed -i "s#%DATE%#$date#g" "$p/CAB/$m.metainfo.xml"
	sed -i "s#%RELEASE%#$crn#" "$p/CAB/$m.metainfo.xml"
	echo "Creating .cab"
	gcab -cn "$p/$m.cab" "$p/CAB/"*
echo "Done"
echo

echo "Updating README"

sed -i "/$name/a $rn" README.md
sed -i "/$name/a \#\#\#\# $t-$v" README.md


echo "Upload to GitHub?"
select git in "Yes" "No"
        do
                break
        done
if [[ "$git" == 'Yes' ]]; then
	git add *
	git commit -m "Added $name $v"
	git push
fi
